#!/usr/bin/env ts-node
/**
 * Test script for AI Client Implementation (AVCA-002 Stage 1)
 * 
 * Tests:
 * 1. AI client initialization and authentication
 * 2. Role-based AI requests (Developer, Auditor, Router)
 * 3. Context management and isolation
 * 4. Token tracking and cost calculation
 * 5. Metrics collection
 */

import { VibeLabAI } from '../lib/avca/services/vibe-lab-ai';
import { ProjectContext } from '../lib/avca/services/context-manager';
import * as dotenv from 'dotenv';
import * as path from 'path';

// Load environment variables
dotenv.config({ path: path.resolve(__dirname, '../../.env.local') });

async function testAIClient() {
  console.log('üß™ Testing AI Client Implementation (AVCA-002)\n');
  
  const ai = new VibeLabAI();
  let allTestsPassed = true;

  try {
    // Test 1: Initialize AI system
    console.log('1Ô∏è‚É£  Initializing AI system...');
    await ai.initialize();
    console.log('   ‚úÖ AI system initialized successfully\n');

    // Test 2: Test Router AI (intent classification)
    console.log('2Ô∏è‚É£  Testing Router AI...');
    const routerResponse = await ai.classifyIntent(
      'I want to add a search bar to my dashboard'
    );
    console.log(`   ‚úÖ Intent classified by ${routerResponse.model}`);
    console.log(`   üìä Tokens: ${routerResponse.usage.totalTokens}, Cost: $${routerResponse.cost.toFixed(4)}`);
    console.log(`   ‚è±Ô∏è  Duration: ${routerResponse.duration}ms\n`);

    // Test 3: Test Developer AI (code generation)
    console.log('3Ô∏è‚É£  Testing Developer AI...');
    const projectContext: ProjectContext = {
      projectId: 'test-001',
      projectName: 'Vibe Lab Test',
      description: 'Testing AI client implementation',
      techStack: ['Next.js', 'TypeScript', 'Tailwind CSS'],
      currentPhase: 'Phase 1 - Foundation'
    };

    const devResponse = await ai.generateCode(
      'Create a simple button component with TypeScript',
      projectContext
    );
    console.log(`   ‚úÖ Code generated by ${devResponse.model}`);
    console.log(`   üìä Tokens: ${devResponse.usage.totalTokens}, Cost: $${devResponse.cost.toFixed(4)}`);
    console.log(`   ‚è±Ô∏è  Duration: ${devResponse.duration}ms`);
    console.log(`   üìù Response preview: ${devResponse.content.substring(0, 100)}...\n`);

    // Test 4: Test Auditor AI (code review)
    console.log('4Ô∏è‚É£  Testing Auditor AI...');
    const codeToReview = `
function processData(data) {
  const result = eval(data);
  document.innerHTML = result;
  return result;
}`;

    const auditResponse = await ai.reviewCode(
      codeToReview,
      projectContext,
      'security vulnerabilities'
    );
    console.log(`   ‚úÖ Code reviewed by ${auditResponse.model}`);
    console.log(`   üìä Tokens: ${auditResponse.usage.totalTokens}, Cost: $${auditResponse.cost.toFixed(4)}`);
    console.log(`   ‚è±Ô∏è  Duration: ${auditResponse.duration}ms\n`);

    // Test 5: Context isolation verification
    console.log('5Ô∏è‚É£  Verifying context isolation...');
    const contextLengths = {
      router: routerResponse.contextUsed.length,
      developer: devResponse.contextUsed.length,
      auditor: auditResponse.contextUsed.length
    };
    
    console.log(`   Router context: ${contextLengths.router} chars`);
    console.log(`   Developer context: ${contextLengths.developer} chars`);
    console.log(`   Auditor context: ${contextLengths.auditor} chars`);
    
    if (contextLengths.router < contextLengths.auditor && 
        contextLengths.auditor < contextLengths.developer) {
      console.log('   ‚úÖ Context isolation working correctly\n');
    } else {
      console.log('   ‚ö†Ô∏è  Context isolation may not be working as expected\n');
      allTestsPassed = false;
    }

    // Test 6: Get metrics
    console.log('6Ô∏è‚É£  Fetching system metrics...');
    const metrics = await ai.getMetrics();
    console.log(`   Requests processed: ${metrics.ai.requestsProcessed}`);
    console.log(`   Active requests: ${metrics.ai.activeRequests}`);
    console.log(`   Errors: ${metrics.ai.errorsCount}`);
    console.log(`   Daily token usage: ${metrics.tokens.daily.totalTokens} tokens`);
    console.log(`   Daily cost: $${metrics.tokens.daily.totalCost.toFixed(4)}`);
    console.log('   ‚úÖ Metrics collected successfully\n');

    // Test 7: Concurrent requests
    console.log('7Ô∏è‚É£  Testing concurrent requests...');
    const concurrentPromises = [
      ai.classifyIntent('How do I deploy my app?'),
      ai.classifyIntent('What is the status of my project?'),
      ai.classifyIntent('Add authentication to my app')
    ];
    
    const startTime = Date.now();
    const results = await Promise.all(concurrentPromises);
    const totalDuration = Date.now() - startTime;
    
    console.log(`   ‚úÖ Processed ${results.length} concurrent requests`);
    console.log(`   ‚è±Ô∏è  Total duration: ${totalDuration}ms`);
    console.log(`   üìä Average: ${Math.round(totalDuration / results.length)}ms per request\n`);

    // Calculate total cost
    const totalCost = routerResponse.cost + devResponse.cost + auditResponse.cost + 
                     results.reduce((sum, r) => sum + r.cost, 0);
    console.log(`üí∞ Total test cost: $${totalCost.toFixed(4)}\n`);

  } catch (error) {
    console.error('‚ùå Test failed:', error);
    allTestsPassed = false;
  } finally {
    // Cleanup
    console.log('üßπ Shutting down AI system...');
    await ai.shutdown();
    console.log('   ‚úÖ AI system shut down successfully\n');
  }

  // Summary
  console.log('üìä Test Summary:');
  console.log('================');
  console.log(`Status: ${allTestsPassed ? '‚úÖ ALL TESTS PASSED' : '‚ùå SOME TESTS FAILED'}`);
  console.log('\nAVCA-002 Stage 1 Implementation:');
  console.log('- ‚úÖ Base AI client with Anthropic integration');
  console.log('- ‚úÖ Authentication and API connection');
  console.log('- ‚úÖ Role-based AI (Developer, Auditor, Router)');
  console.log('- ‚úÖ Context management with isolation');
  console.log('- ‚úÖ Token tracking and cost calculation');
  console.log('- ‚úÖ Basic concurrency handling');
  
  return allTestsPassed;
}

// Run the test
testAIClient()
  .then(success => {
    process.exit(success ? 0 : 1);
  })
  .catch(error => {
    console.error('Unexpected error:', error);
    process.exit(1);
  }); 